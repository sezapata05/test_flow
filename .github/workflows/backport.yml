name: Backport to Dev (Protected Branch)
on:
  push:
    branches:
      - master
jobs:
  create-backport-pr:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT }}

    - name: Set up Git
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com

    - name: Get last commit author
      id: get_author
      run: |
        AUTHOR=$(git log -1 --pretty=format:'%an <%ae>')
        AUTHOR_USERNAME=$(echo $AUTHOR | sed -n 's/.*<\(.*\)@.*/\1/p')
        echo "author=$AUTHOR" >> $GITHUB_OUTPUT
        echo "username=$AUTHOR_USERNAME" >> $GITHUB_OUTPUT

    - name: Create or update backport branch
      run: |
        git fetch origin dev
        git checkout -B backport-to-dev origin/dev
        git merge origin/master --no-edit
        git push origin backport-to-dev --force

    - name: Check for differences
      id: check_diff
      run: |
        git diff --quiet origin/dev...backport-to-dev || echo "has_changes=true" >> $GITHUB_OUTPUT

    - name: Create Pull Request
      if: steps.check_diff.outputs.has_changes == 'true'
      env:
        GH_TOKEN: ${{ secrets.PAT }}
      id: create_pr
      run: |
        PR_URL=$(gh pr create --base dev --head backport-to-dev --title "Backport: Merge master into dev" --body "Este PR backporta los cambios de master a dev.
        Por favor, revise los cambios y apruebe el PR si todo está correcto.

        Último autor del commit en master: ${{ steps.get_author.outputs.author }}" --label backport,"needs review")
        echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
        echo "PR creado: $PR_URL"

    - name: Assign PR to last commit author
      if: steps.check_diff.outputs.has_changes == 'true'
      env:
        GH_TOKEN: ${{ secrets.PAT }}
      run: |
        PR_NUMBER=$(echo "${{ steps.create_pr.outputs.pr_url }}" | awk -F'/' '{print $NF}')
        gh pr edit $PR_NUMBER --add-assignee ${{ steps.get_author.outputs.username }}
        echo "PR asignado a ${{ steps.get_author.outputs.username }}"

    - name: Notify status
      run: |
        if [ "${{ steps.check_diff.outputs.has_changes }}" == "true" ]; then
          echo "Se ha creado o actualizado un PR para backport de master a dev."
          echo "El PR ha sido asignado a ${{ steps.get_author.outputs.username }}"
        else
          echo "No hay cambios adicionales para backport de master a dev."
        fi
        echo "Estado actual de la rama backport-to-dev:"
        git log -1 --oneline backport-to-dev
        echo "Diferencias entre master y backport-to-dev:"
        git diff --stat master...backport-to-dev


# este si
# name: Backport to Dev (Protected Branch)
# on:
#   push:
#     branches:
#       - master
# jobs:
#   create-backport-pr:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3
#       with:
#         fetch-depth: 0
#         token: ${{ secrets.PAT }}

#     - name: Set up Git
#       run: |
#         git config user.name github-actions
#         git config user.email github-actions@github.com

#     - name: Get last commit author
#       id: get_author
#       run: |
#         AUTHOR=$(git log -1 --pretty=format:'%an <%ae>')
#         AUTHOR_USERNAME=$(echo $AUTHOR | sed -n 's/.*<\(.*\)@.*/\1/p')
#         echo "author=$AUTHOR" >> $GITHUB_OUTPUT
#         echo "username=$AUTHOR_USERNAME" >> $GITHUB_OUTPUT

#     - name: Create or update backport branch
#       run: |
#         git fetch origin dev
#         git checkout -B backport-to-dev origin/dev
#         git merge origin/master --no-edit
#         git push origin backport-to-dev --force

#     - name: Check for differences
#       id: check_diff
#       run: |
#         git diff --quiet origin/dev...backport-to-dev || echo "has_changes=true" >> $GITHUB_OUTPUT

#     - name: Create Pull Request
#       if: steps.check_diff.outputs.has_changes == 'true'
#       env:
#         GH_TOKEN: ${{ secrets.PAT }}
#       run: |
#         PR_URL=$(gh pr create --base dev --head backport-to-dev --title "Backport: Merge master into dev" --body "Este PR backporta los cambios de master a dev.
#         Por favor, revise los cambios y apruebe el PR si todo está correcto.

#         Último autor del commit en master: ${{ steps.get_author.outputs.author }}" --label backport,"needs review")
#         echo "PR creado: $PR_URL"

#     - name: Notify status
#       run: |
#         if [ "${{ steps.check_diff.outputs.has_changes }}" == "true" ]; then
#           echo "Se ha creado o actualizado un PR para backport de master a dev."
#         else
#           echo "No hay cambios adicionales para backport de master a dev."
#         fi
#         echo "Estado actual de las ramas:"
#         git show-branch master dev backport-to-dev


# Last
# name: Backport to Dev
# on:
#   push:
#     branches:
#       - master
# jobs:
#   backport:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3
#       with:
#         fetch-depth: 0
#         token: ${{ secrets.PAT }}

#     - name: Set up Git
#       run: |
#         git config user.name github-actions
#         git config user.email github-actions@github.com

#     - name: Get last commit author
#       id: get_author
#       run: |
#         AUTHOR=$(git log -1 --pretty=format:'%an <%ae>')
#         AUTHOR_USERNAME=$(echo $AUTHOR | sed -n 's/.*<\(.*\)@.*/\1/p')
#         echo "author=$AUTHOR" >> $GITHUB_OUTPUT
#         echo "username=$AUTHOR_USERNAME" >> $GITHUB_OUTPUT

#     - name: Update dev branch
#       run: |
#         git fetch origin dev
#         if git rev-parse --verify origin/dev > /dev/null 2>&1; then
#           echo "Dev branch exists, updating..."
#           git checkout dev
#           git merge origin/master --no-edit
#         else
#           echo "Dev branch does not exist. Creating it from master."
#           git checkout -b dev origin/master
#         fi
#         git push origin dev

#     - name: Check for differences
#       id: check_diff
#       run: |
#         git diff --quiet origin/dev...origin/master || echo "has_changes=true" >> $GITHUB_OUTPUT

#     - name: Create Pull Request if needed
#       if: steps.check_diff.outputs.has_changes == 'true'
#       uses: peter-evans/create-pull-request@v5
#       with:
#         token: ${{ secrets.PAT }}
#         branch: backport-to-dev
#         base: dev
#         title: 'Backport: Merge master into dev'
#         body: |
#           Este PR backporta los cambios de master a dev.
#           Por favor, revise los cambios y apruebe el PR si todo está correcto.

#           Último autor del commit en master: ${{ steps.get_author.outputs.author }}
#         draft: true
#         labels: |
#           backport
#           needs review
#         assignees: ${{ steps.get_author.outputs.username }}

#     - name: Notify status
#       run: |
#         if [ "${{ steps.check_diff.outputs.has_changes }}" == "true" ]; then
#           echo "Se ha creado un PR para backport de master a dev."
#         else
#           echo "No hay cambios adicionales para backport de master a dev."
#         fi
#         echo "Estado actual de las ramas:"
#         git show-branch master dev

#     - name: Check for open PRs
#       run: |
#         pr_count=$(gh pr list --base dev --head backport-to-dev --json number --jq length)
#         echo "Número de PRs abiertos de backport-to-dev a dev: $pr_count"
#       env:
#         GITHUB_TOKEN: ${{ secrets.PAT }}



# old

# name: Fast-forward Dev to Master

# on:
#   pull_request:
#     types: [closed]
#     branches:
#       - master

# jobs:
#   fast-forward-dev:
#     name: Fast-forward Dev to Master
#     if: github.event.pull_request.merged == true
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0
#           token: ${{ secrets.PAT }}

#       - name: Set up Git
#         run: |
#           git config user.name github-actions
#           git config user.email github-actions@github.com

#       - name: Fast-forward Dev to Master
#         run: |
#           git fetch origin master dev

#           # Verificar si dev está detrás de master
#           if git merge-base --is-ancestor origin/dev origin/master; then
#             echo "Dev está detrás de master. Realizando fast-forward..."
#             git checkout dev
#             git merge --ff-only origin/master
#             git push origin dev
#           else
#             echo "Dev no está detrás de master. No se puede realizar fast-forward."
#             exit 1
#           fi
#         env:
#           GITHUB_TOKEN: ${{ secrets.PAT }}

#       - name: Create Pull Request if needed
#         if: failure()
#         uses: peter-evans/create-pull-request@v5
#         with:
#           token: ${{ secrets.PAT }}
#           branch: update-dev-from-master
#           base: dev
#           title: 'Update Dev from Master'
#           body: |
#             No se pudo realizar un fast-forward de Dev a Master.
#             Este PR contiene los cambios necesarios para actualizar Dev.

#             Por favor, revise los cambios y resuelva cualquier conflicto si es necesario.
#           labels: update, needs review

#       - name: Notify status
#         if: always()
#         run: |
#           if [ ${{ job.status }} == 'success' ]; then
#             echo "Dev ha sido actualizado exitosamente con los cambios de Master."
#           else
#             echo "No se pudo actualizar Dev automáticamente. Se ha creado un PR para revisión manual."
#           fi
